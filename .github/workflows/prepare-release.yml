name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type (major|minor|patch|premajor|preminor|prepatch|prerelease)'
        required: true
        default: patch
      preid:
        description: 'Pre-release identifier (beta|rc|alpha)'
        required: false
        default: beta
      dry_run:
        description: 'Dry run (true = no branch/PR)'
        required: false
        default: 'false'

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.calc.outputs.next_version }}
      is_prerelease: ${{ steps.calc.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Calculate next version
        id: calc
        env:
          BUMP: ${{ github.event.inputs.bump_type }}
          PREID: ${{ github.event.inputs.preid }}
        run: |
          set -e
          CORE_FILE=crates/source_map_parser/Cargo.toml
          NODE_FILE=crates/node_sdk/Cargo.toml
          CURRENT=$(grep '^version' $CORE_FILE | head -1 | cut -d '"' -f2)
          echo "Current version: $CURRENT"

          base_version() {
            echo "$1" | sed -E 's/(-|\+).*//'
          }

          inc_semver() {
            local ver=$1 part=$2
            IFS='.' read -r MA MI PA <<<"$ver"
            case $part in
              major) MA=$((MA+1)); MI=0; PA=0;;
              minor) MI=$((MI+1)); PA=0;;
              patch) PA=$((PA+1));;
              *) echo "Unknown bump" >&2; exit 1;;
            esac
            echo "${MA}.${MI}.${PA}"
          }

          is_prerelease=false
          case $BUMP in
            premajor|preminor|prepatch|prerelease)
              is_prerelease=true
              ;;
          esac

          BASE=$(base_version "$CURRENT")

          if [[ $BUMP == premajor || $BUMP == preminor || $BUMP == prepatch ]]; then
            case $BUMP in
              premajor) BASE=$(inc_semver "$BASE" major);;
              preminor) BASE=$(inc_semver "$BASE" minor);;
              prepatch) BASE=$(inc_semver "$BASE" patch);;
            esac
            NEXT_BASE=$BASE
            SEQ=0
          elif [[ $BUMP == prerelease ]]; then
            NEXT_BASE=$BASE
            # find last prerelease with same base
            LAST=$(git tag --list "v${BASE}-${PREID}.*" | sed -E 's/^v[0-9]+\.[0-9]+\.[0-9]+-'"$PREID"'\.([0-9]+)$/\1/' | sort -n | tail -1)
            if [[ -z $LAST ]]; then SEQ=0; else SEQ=$((LAST+1)); fi
          else
            # normal bump
            NEXT_BASE=$(inc_semver "$BASE" $BUMP)
          fi

          if [[ $is_prerelease == true ]]; then
            NEXT_VERSION="${NEXT_BASE}-${PREID}.${SEQ:-0}"
          else
            NEXT_VERSION="$NEXT_BASE"
          fi

          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$is_prerelease" >> $GITHUB_OUTPUT
          echo "Next: $NEXT_VERSION"

      - name: Update versions in Cargo.toml
        run: |
          NV=${{ steps.calc.outputs.next_version }}
          for f in crates/source_map_parser/Cargo.toml crates/node_sdk/Cargo.toml; do
            awk -v ver="$NV" 'BEGIN{done=0} /^version *=/ && done==0 {print "version = \"" ver "\""; done=1; next} {print}' "$f" > /tmp/_tmp && mv /tmp/_tmp "$f"
          done
          # sync dependency in node_sdk
          sed -i "s/version = \"[0-9A-Za-z.-]*\" }/version = \"$NV\" }/" crates/node_sdk/Cargo.toml
          echo "Updated versions to $NV"
          grep '^version' crates/source_map_parser/Cargo.toml | head -1
          grep '^version' crates/node_sdk/Cargo.toml | head -1

      - name: Generate changelog (preview)
        run: |
          chmod +x scripts/generate-changelog.sh || true
          ./scripts/generate-changelog.sh ${{ steps.calc.outputs.next_version }} "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" || echo "Changelog script skipped"
          head -100 CHANGELOG.md || true

      - name: Dry run stop
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "Dry run requested. No branch or PR created."; exit 0

      - name: Create release branch & commit
        run: |
          NV=${{ steps.calc.outputs.next_version }}
          BR=chore/release-v$NV
          git config user.name 'github-actions'
          git config user.email 'github-actions@users.noreply.github.com'
          git checkout -b "$BR"
          git add crates/*/Cargo.toml CHANGELOG.md || true
          git commit -m "chore(release): v$NV"
          git push origin "$BR"

      - name: Open PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/release-v${{ steps.calc.outputs.next_version }}
          title: 'chore(release): v${{ steps.calc.outputs.next_version }}'
          body: |
            Prepare release v${{ steps.calc.outputs.next_version }}
            - bump type: ${{ github.event.inputs.bump_type }}
            - prerelease: ${{ steps.calc.outputs.is_prerelease }} (preid=${{ github.event.inputs.preid }})
          labels: release
