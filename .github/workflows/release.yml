name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  WASM_PACK_VERSION: 0.12.1

jobs:
  verify-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_beta: ${{ steps.extract.outputs.is_beta }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract version from tag
        id: extract
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION="${TAG#v}"
          if echo "$VERSION" | grep -qiE 'beta|rc|alpha'; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $VERSION"
      - name: Check node crate version matches tag
        run: |
          TAG_VERSION=${{ steps.extract.outputs.version }}
          FILE=crates/node_sdk/Cargo.toml
          CURRENT=$(grep '^version' "$FILE" | head -1 | cut -d '"' -f2)
          echo "current: $CURRENT tag: $TAG_VERSION"
          if [ "$CURRENT" != "$TAG_VERSION" ]; then
            echo "Adjusting version in $FILE -> $TAG_VERSION"
            # replace first occurrence of version line under [package]
            awk -v ver="$TAG_VERSION" 'BEGIN{done=0} /^version *=/ && done==0 {print "version = \"" ver "\""; done=1; next} {print}' "$FILE" > /tmp/_tmp && mv /tmp/_tmp "$FILE"
          fi
          grep '^version' "$FILE" | head -1
      - name: (Optional) Show diff after version sync
        run: git diff --name-only && git --no-pager diff crates/node_sdk/Cargo.toml || true
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: wasm32-unknown-unknown
          override: true
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Cache wasm-pack
        id: cache-wasm-pack
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/wasm-pack
          key: ${{ runner.os }}-wasm-pack-${{ env.WASM_PACK_VERSION }}
      - name: Install wasm-pack
        if: steps.cache-wasm-pack.outputs.cache-hit != 'true'
        run: curl -sSf https://raw.githubusercontent.com/rustwasm/wasm-pack/master/docs/book/src/install.sh | bash -s -- -f -v $WASM_PACK_VERSION
      - name: Run tests (native)
        run: cargo test --workspace --exclude source_map_parser_node --all-features
      - name: Run tests (wasm)
        run: wasm-pack test --node crates/node_sdk
      - name: Generate CHANGELOG
        env:
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}
        run: |
          chmod +x scripts/generate-changelog.sh
          ./scripts/generate-changelog.sh ${{ steps.extract.outputs.version }} "$REPO_URL"
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  publish-npm:
    needs: [verify-and-test]
    runs-on: ubuntu-latest
    env:
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # ensure repository secret NPM_TOKEN is set
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: wasm32-unknown-unknown
          override: true
      - name: Cache wasm-pack
        id: cache-wasm-pack
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/wasm-pack
          key: ${{ runner.os }}-wasm-pack-${{ env.WASM_PACK_VERSION }}
      - name: Install wasm-pack
        if: steps.cache-wasm-pack.outputs.cache-hit != 'true'
        run: curl -sSf https://raw.githubusercontent.com/rustwasm/wasm-pack/master/docs/book/src/install.sh | bash -s -- -f -v $WASM_PACK_VERSION
      - name: Build wasm package (node)
        run: |
          wasm-pack build crates/node_sdk --target nodejs --out-dir pkg --release
          ls -l pkg
      - name: Copy README into package
        run: |
          if [ -f crates/node_sdk/README.md ]; then
            cp crates/node_sdk/README.md pkg/README.md
            echo "Copied README.md into pkg/"
          else
            echo "crates/node_sdk/README.md not found" >&2
          fi
      - name: Set npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
      - name: Publish to npm (stable / beta)
        run: |
          cd pkg
          VERSION=${{ needs.verify-and-test.outputs.version }}
          IS_BETA=${{ needs.verify-and-test.outputs.is_beta }}
          if [ "$IS_BETA" = "true" ]; then
            echo "Publishing prerelease (beta) with dist-tag beta"
            npm publish --tag beta --access public || echo "npm beta publish skipped"
          else
            echo "Publishing stable release"
            npm publish --access public || echo "npm publish skipped"
          fi

  github-release:
    needs: [publish-npm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download changelog artifact
        uses: actions/download-artifact@v4
        with:
          name: changelog
      - name: Extract current release notes
        id: notes
        run: |
          awk '/^## v/' CHANGELOG.md | head -1 > notes.txt
          # Append section under first heading until next heading
          awk 'NR==1{p=1} /^## v/ && NR>1{p=0} p{print}' CHANGELOG.md > notes.txt
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: source-map-parser ${{ github.ref_name }}
          body_path: notes.txt
          prerelease: ${{ needs.verify-and-test.outputs.is_beta == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-version-pr:
    needs: [github-release, verify-and-test]
    if: needs.verify-and-test.outputs.is_beta != 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure version committed
        run: |
          VERSION=${{ needs.verify-and-test.outputs.version }}
          FILE=crates/node_sdk/Cargo.toml
          if ! grep -q "version = \"$VERSION\"" "$FILE"; then
            echo "Version not updated in main branch, writing now.";
            awk -v ver="$VERSION" 'BEGIN{done=0} /^version *=/ && done==0 {print "version = \"" ver "\""; done=1; next} {print}' "$FILE" > /tmp/_tmp && mv /tmp/_tmp "$FILE"
          fi
          git diff --name-only || true
      - name: Create branch & commit
        run: |
          VERSION=${{ needs.verify-and-test.outputs.version }}
          BRANCH=chore/release-sync-v$VERSION
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name 'github-actions'
            git config user.email 'github-actions@users.noreply.github.com'
            git checkout -b "$BRANCH"
            git add crates/node_sdk/Cargo.toml
            git commit -m "chore: sync version v$VERSION"
            git push origin "$BRANCH" || true
          else
            echo "No changes to commit"; exit 0;
          fi
      - name: Open PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/release-sync-v${{ needs.verify-and-test.outputs.version }}
          title: "chore: sync version v${{ needs.verify-and-test.outputs.version }}"
          body: 'Sync Cargo.toml version with released tag.'
          labels: release
