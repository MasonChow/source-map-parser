# <!-- Powered by BMAD™ Core -->
workflow:
  id: brownfield-service-with-branch
  name: Brownfield Service/API Enhancement with Branching
  description: >-
    Enhanced agent workflow for brownfield development that automatically creates
    feature branches before starting development work. Ensures safe development
    practices with proper git branching strategy.
  type: brownfield
  project_types:
    - service-modernization
    - api-enhancement
    - microservice-extraction
    - performance-optimization
    - integration-enhancement

  sequence:
    - step: service_analysis
      agent: architect
      action: analyze existing project and use task document-project
      creates: multiple documents per the document-project template
      notes: "Review existing service documentation, codebase, performance metrics, and identify integration dependencies."

    - agent: pm
      creates: prd.md
      uses: brownfield-prd-tmpl
      requires: existing_service_analysis
      notes: "Creates comprehensive PRD focused on service enhancement with existing system analysis. SAVE OUTPUT: Copy final prd.md to your project's docs/ folder."

    - agent: architect
      creates: architecture.md
      uses: brownfield-architecture-tmpl
      requires: prd.md
      notes: "Creates architecture with service integration strategy and API evolution planning. SAVE OUTPUT: Copy final architecture.md to your project's docs/ folder."

    - agent: po
      validates: all_artifacts
      uses: po-master-checklist
      notes: "Validates all documents for service integration safety and API compatibility. May require updates to any document."

    - agent: various
      updates: any_flagged_documents
      condition: po_checklist_issues
      notes: "If PO finds issues, return to relevant agent to fix and re-export updated documents to docs/ folder."

    - agent: po
      action: shard_documents
      creates: sharded_docs
      requires: all_artifacts_in_project
      notes: |
        Shard documents for IDE development:
        - Option A: Use PO agent to shard: @po then ask to shard docs/prd.md
        - Option B: Manual: Drag shard-doc task + docs/prd.md into chat
        - Creates docs/prd/ and docs/architecture/ folders with sharded content

    - step: create_feature_branch
      agent: dev
      action: create git feature branch
      creates: feature-branch
      notes: |
        **AUTOMATIC BRANCH CREATION**: Before starting any development work:
        1. Check current branch: git branch --show-current
        2. Create feature branch: git checkout -b feature/[story-name]-[timestamp]
        3. Push branch to remote: git push -u origin feature/[story-name]-[timestamp]
        4. Verify branch creation: git branch -a
        
        Branch naming convention: feature/[epic-name]-[story-id]-YYYYMMDD-HHMMSS
        Example: feature/api-performance-optimization-20250904-143022

    - agent: sm
      action: create_story
      creates: story.md
      requires: sharded_docs
      repeats: for_each_epic
      notes: |
        Story creation cycle:
        - SM Agent (New Chat): @sm → *create
        - Creates next story from sharded docs
        - Story starts in "Draft" status
        - **IMPORTANT**: SM will coordinate with dev to ensure branch is created before development begins

    - agent: analyst/pm
      action: review_draft_story
      updates: story.md
      requires: story.md
      optional: true
      condition: user_wants_story_review
      notes: |
        OPTIONAL: Review and approve draft story
        - NOTE: story-review task coming soon
        - Review story completeness and alignment
        - Update story status: Draft → Approved

    - agent: dev
      action: implement_story
      creates: implementation_files
      requires: story.md and feature-branch
      notes: |
        Dev Agent (New Chat): @dev
        - **ENSURE**: Feature branch is checked out before starting
        - Verify: git branch --show-current
        - Implements approved story
        - Updates File List with all changes
        - Marks story as "Review" when complete

    - agent: qa
      action: review_implementation
      updates: implementation_files
      requires: implementation_files
      optional: true
      notes: |
        OPTIONAL: QA Agent (New Chat): @qa → review-story
        - Senior dev review with refactoring ability
        - Fixes small issues directly
        - Leaves checklist for remaining items
        - Updates story status (Review → Done or stays Review)

    - agent: dev
      action: address_qa_feedback
      updates: implementation_files
      condition: qa_left_unchecked_items
      notes: |
        If QA left unchecked items:
        - Dev Agent (New Chat): Address remaining items
        - Return to QA for final approval

    - step: branch_cleanup
      agent: dev
      action: prepare branch for PR
      condition: story_complete
      notes: |
        **BRANCH CLEANUP**: After story completion:
        1. Ensure all tests pass: cargo test --workspace --all-features
        2. Update branch with main: git pull origin main
        3. Resolve any merge conflicts
        4. Push final changes: git push origin feature/[branch-name]
        5. Create pull request via GitHub CLI: gh pr create --title "[Story Title]" --body "$(cat story.md)"

    - step: repeat_development_cycle
      action: continue_for_all_stories
      notes: |
        Repeat story cycle (SM → Branch Creation → Dev → QA) for all epic stories
        Each story gets its own feature branch
        Continue until all stories in PRD are complete

    - agent: po
      action: epic_retrospective
      creates: epic-retrospective.md
      condition: epic_complete
      optional: true
      notes: |
        OPTIONAL: After epic completion
        - NOTE: epic-retrospective task coming soon
        - Validate epic was completed correctly
        - Document learnings and improvements

    - step: workflow_end
      action: project_complete
      notes: |
        All stories implemented and reviewed!
        All feature branches merged via pull requests
        Project development phase complete.

        Reference: .bmad-core/data/bmad-kb.md#IDE Development Workflow

  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: Service Enhancement] --> B[analyst: analyze existing service]
        B --> C[pm: prd.md]
        C --> D[architect: architecture.md]
        D --> E[po: validate with po-master-checklist]
        E --> F{PO finds issues?}
        F -->|Yes| G[Return to relevant agent for fixes]
        F -->|No| H[po: shard documents]
        G --> E
        
        H --> I[sm: create story]
        I --> J[dev: create feature branch]
        J --> K[dev: implement story on branch]
        K --> L{QA review?}
        L -->|Yes| M[qa: review implementation]
        L -->|No| N{More stories?}
        M --> O{QA found issues?}
        O -->|Yes| P[dev: address QA feedback]
        O -->|No| Q[dev: prepare branch for PR]
        P --> M
        Q --> N
        N -->|Yes| I
        N -->|No| R{Epic retrospective?}
        R -->|Yes| S[po: epic retrospective]
        R -->|No| T[Project Complete]
        S --> T

        style T fill:#90EE90
        style H fill:#ADD8E6
        style I fill:#ADD8E6
        style K fill:#ADD8E6
        style J fill:#FFB6C1
        style Q fill:#FFB6C1
    ```

  decision_guidance:
    when_to_use:
      - Service enhancement requires coordinated stories
      - API versioning or breaking changes needed
      - Database schema changes required
      - Performance or scalability improvements needed
      - Multiple integration points affected
      - **IMPORTANT**: When you want automatic branch creation for each story

  branch_strategy:
    naming_convention: "feature/[epic-name]-[story-id]-YYYYMMDD-HHMMSS"
    example: "feature/api-performance-optimization-20250904-143022"
    cleanup_required: true
    pr_required: true

  handoff_prompts:
    analyst_to_pm: "Service analysis complete. Create comprehensive PRD with service integration strategy."
    pm_to_architect: "PRD ready. Save it as docs/prd.md, then create the service architecture."
    architect_to_po: "Architecture complete. Save it as docs/architecture.md. Please validate all artifacts for service integration safety."
    po_issues: "PO found issues with [document]. Please return to [agent] to fix and re-save the updated document."
    branch_creation: "Before starting development, create feature branch: git checkout -b feature/[story-name]-[timestamp]"
    complete: "All planning artifacts validated and saved in docs/ folder. Feature branches will be created automatically for each story. Move to IDE environment to begin development."